"""empty message

Revision ID: c97287126e12
Revises: 3539f2563d0f
Create Date: 2023-10-08 16:21:16.012437

"""

from typing import Sequence, Union

import sqlalchemy as sa
from alembic import op
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = "c97287126e12"
down_revision: Union[str, None] = "3539f2563d0f"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None

proposal_status_enum = sa.Enum(
    "DRAFTING",
    "SUBMITTED_OR_DELIVERABLE_IN_PROGRESS",
    "APPROVED_OR_REPORTED",
    "VOTING_OR_ACCEPTED",
    "REJECTED_OR_PROPOSAL_IN_PROGRESS",
    "FAILED_OR_CLAIMED",
    "CANCELLED",
    "COMPLETED",
    "FAILED_DRAFT",
    name="proposalstatuskey",
)


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "proposals",
        sa.Column("proposal_id", sa.Integer(), nullable=False),
        sa.Column("author", sa.String(length=15), nullable=False),
        sa.Column(
            "status",
            proposal_status_enum,
            nullable=True,
        ),
        sa.Column("uuid", sa.Uuid(), server_default=sa.text("uuid_generate_v4()"), autoincrement=False, nullable=False),
        sa.Column("created_at", sa.DateTime(), server_default=sa.text("now()"), nullable=False),
        sa.Column("updated_at", sa.DateTime(), nullable=False),
        sa.PrimaryKeyConstraint("uuid", name=op.f("pk_proposals")),
        sa.UniqueConstraint("proposal_id", name=op.f("uq_proposals_proposal_id")),
        sa.UniqueConstraint("uuid", name=op.f("uq_proposals_uuid")),
    )
    op.create_unique_constraint(op.f("uq_subscriptions_uuid"), "subscriptions", ["uuid"])
    op.drop_constraint("fk_subscriptions_proposal_id_proposal_statuses", "subscriptions", type_="foreignkey")
    op.create_foreign_key(
        op.f("fk_subscriptions_proposal_id_proposals"),
        "subscriptions",
        "proposals",
        ["proposal_id"],
        ["proposal_id"],
    )
    op.alter_column(
        "users",
        "chat_id",
        existing_type=sa.VARCHAR(length=60),
        type_=sa.Integer(),
        existing_nullable=False,
        postgresql_using="chat_id::integer",
    )
    op.create_unique_constraint(op.f("uq_users_uuid"), "users", ["uuid"])
    op.drop_table("proposal_statuses")
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint(op.f("uq_users_uuid"), "users", type_="unique")
    op.alter_column(
        "users", "chat_id", existing_type=sa.Integer(), type_=sa.VARCHAR(length=60), existing_nullable=False
    )
    op.drop_constraint(op.f("uq_subscriptions_uuid"), "subscriptions", type_="unique")
    op.create_table(
        "proposal_statuses",
        sa.Column("proposal_id", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column("author", sa.VARCHAR(length=15), autoincrement=False, nullable=False),
        sa.Column("status", sa.VARCHAR(length=60), autoincrement=False, nullable=True),
        sa.Column("uuid", sa.UUID(), server_default=sa.text("uuid_generate_v4()"), autoincrement=False, nullable=False),
        sa.Column(
            "created_at", postgresql.TIMESTAMP(), server_default=sa.text("now()"), autoincrement=False, nullable=False
        ),
        sa.Column("updated_at", postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
        sa.PrimaryKeyConstraint("uuid", name="pk_proposal_statuses"),
        sa.UniqueConstraint("proposal_id", name="uq_proposal_statuses_proposal_id"),
    )
    op.drop_constraint(op.f("fk_subscriptions_proposal_id_proposals"), "subscriptions", type_="foreignkey")
    op.drop_table("proposals")
    op.create_foreign_key(
        "fk_subscriptions_proposal_id_proposal_statuses",
        "subscriptions",
        "proposal_statuses",
        ["proposal_id"],
        ["proposal_id"],
    )
    proposal_status_enum.drop(op.get_bind(), checkfirst=True)
    # ### end Alembic commands ###
